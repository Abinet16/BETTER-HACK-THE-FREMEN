// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- INVENTORY ----------------

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  sku         String   @unique
  description String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  supplierId  Int
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  price       Float
  cost        Float
  stock       Stock[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Supplier {
  id       Int       @id @default(autoincrement())
  name     String
  email    String?
  phone    String?
  address  String?
  products Product[]
}

model Warehouse {
  id       Int     @id @default(autoincrement())
  name     String
  location String?
  stock    Stock[]
}

model Stock {
  id          Int             @id @default(autoincrement())
  productId   Int
  warehouseId Int
  quantity    Int             @default(0)
  product     Product         @relation(fields: [productId], references: [id])
  warehouse   Warehouse       @relation(fields: [warehouseId], references: [id])
  movements   StockMovement[]
}

model StockMovement {
  id        Int          @id @default(autoincrement())
  stockId   Int
  type      MovementType
  quantity  Int
  createdAt DateTime     @default(now())
  stock     Stock        @relation(fields: [stockId], references: [id])
}

enum MovementType {
  IN
  OUT
}

// ---------------- HR ----------------

model Employee {
  id           Int          @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String       @unique
  phone        String?
  hireDate     DateTime
  salary       Float
  positionId   Int
  departmentId Int
  position     Position     @relation(fields: [positionId], references: [id])
  department   Department   @relation(fields: [departmentId], references: [id])
  attendances  Attendance[]
  leaves       Leave[]
  payrolls     Payroll[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employees Employee[]
}

model Position {
  id        Int        @id @default(autoincrement())
  title     String
  level     String?
  employees Employee[]
}

model Attendance {
  id         Int              @id @default(autoincrement())
  employeeId Int
  date       DateTime
  status     AttendanceStatus
  employee   Employee         @relation(fields: [employeeId], references: [id])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LEAVE
  REMOTE
}

model Leave {
  id         Int         @id @default(autoincrement())
  employeeId Int
  startDate  DateTime
  endDate    DateTime
  type       LeaveType
  status     LeaveStatus @default(PENDING)
  reason     String?
  employee   Employee    @relation(fields: [employeeId], references: [id])
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
  UNPAID
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Payroll {
  id         Int      @id @default(autoincrement())
  employeeId Int
  month      Int
  year       Int
  baseSalary Float
  bonus      Float    @default(0)
  deductions Float    @default(0)
  netSalary  Float
  employee   Employee @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())
}

// ---------------- CRM ----------------

model Customer {
  id            Int           @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String        @unique
  phone         String?
  company       String?
  joinedAt      DateTime      @default(now())
  isActive      Boolean       @default(true)
  contacts      Contact[]
  opportunities Opportunity[]
  interactions  Interaction[]
}

model Contact {
  id         Int      @id @default(autoincrement())
  customerId Int
  name       String
  title      String?
  email      String?
  phone      String?
  customer   Customer @relation(fields: [customerId], references: [id])

  // âœ… fix: add this line to complete the relation
  interactions Interaction[]
}

model Opportunity {
  id            Int              @id @default(autoincrement())
  customerId    Int
  title         String
  amount        Float
  stage         OpportunityStage @default(LEAD)
  expectedClose DateTime?
  createdAt     DateTime         @default(now())
  customer      Customer         @relation(fields: [customerId], references: [id])
}

enum OpportunityStage {
  LEAD
  QUALIFIED
  PROPOSAL
  WON
  LOST
}

model Interaction {
  id         Int             @id @default(autoincrement())
  customerId Int
  contactId  Int?
  type       InteractionType
  subject    String?
  notes      String?
  occurredAt DateTime        @default(now())
  customer   Customer        @relation(fields: [customerId], references: [id])
  contact    Contact?        @relation(fields: [contactId], references: [id])
}

enum InteractionType {
  CALL
  EMAIL
  MEETING
  OTHER
}
